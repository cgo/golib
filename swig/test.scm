(load-extension "libgolib_guile.so" "scm_init_golib_guile_module")
(load-extension "libshape_guile.so" "scm_init_shape_guile_module")
(primitive-load-path "golib_guile.scm")
(primitive-load-path "shape_guile.scm")

(use-modules (oop goops)
             ;(shape_guile)
             (golib_guile))

(define (print-signal-info s)
    (let ((gs (make-instance <goString>)))
        (goSignalInfoText s gs #f)
        (display (to-string gs))))
    
;(define LS (make-instance <goRegionLS>))
(define image (make-instance <goSignal3Dv>))
(goReadImage "/home/gosch/bulletcluster.jpg" image)
(define image2 (make-instance <goSignal3Dv>))
(setDataType image2 (GO-FLOAT))
(make-signal image2 image)
(goCopySignal image image2)
(format #t "Signal 1:\n")
(print-signal-info image)
(format #t "\nSignal 2:\n")
(print-signal-info image2)
(define image3 (make-instance <goSignal3Dv>))

(let ((ls (make-instance <goRegionLS>)))
    (setImage ls image2 1.0 1.0 #t)
    (display "\nEvolving...\n")
    (let loop1 ((n 50))
        (if (> n 0)
            (begin
                (evolve ls 1)
                (loop1 (- a 1)))))
    (let ((temp (make-instance <goSignal3Dv>)))
        (setDataType temp GO-INT8)
        (make-signal temp (getPhi ls))
        (goConvertSignal (getPhi ls) temp)
        (goWriteImage "phi.tif" temp)))
        

(setDataType image3 (GO-INT8))
(make-signal image3 image2)
(goCopySignal image2 image3)
(goWriteImage "test.jpg" image3)
