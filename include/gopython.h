/*
 * Python embedding helper for SWIG-wrapped objects and others.
 * (C) Copyright Christian Gosch, all rights reserved.
 */
#ifndef GOPYTHON_H
#define GOPYTHON_H

#include <Python.h>

//= This is generated by swig -python -external-runtime
#include <golib_swig_python.h>
#include <gostring.h>
#ifndef GOSIGNAL3DBASE_H
# include <gosignal3dbase.h>
#endif
#ifndef GOVECTOR_H
# include <govector.h>
#endif
#ifndef GOMATRIX_H
# include <gomatrix.h>
#endif

/**
 * @addtogroup pythonembed
 * @{
 */
/** 
 * @brief Python embedding.
 * Make sure there exists only one python interpreter.
 * Possibly there can be one per thread, but that is not tested.
 * This is all quite new. 
 *
 * Programs using this must know the path to the python include file \c Python.h
 * when compiling, else compilation will fail.
 *
 * There are set/get methods for some golib objects, they all look like <br>
 * <code>set (const char* name, TYPE *o, bool own_it);</code> <br>
 * <code>TYPE* getNAME (const char* name, bool own_it);</code> <br>
 * Examples are 
 * <code> goVectorf* getVectorf (...) </code>
 * <code> goSignal3D<void>* getSignal3D (...) </code>
 *
 * All set/get function pairs for swig wrapped objects are created with 
 * the macros \c GOPYTHON_GETSET_DEFINITION and \c GOPYTHON_GETSET_DECLARATION
 * for definition and declaration, respectively.
 * These macros can also be used to extend this namespace in other 
 * libraries / applications. The above macros are just for convenience and
 * create functions the \c setSwigPointer / \c getSwigPointer.
 * Functions for simple types should be declared and defined separately.
 */
namespace goPython
{
        extern goMutex mutex;
        extern PyObject* mainMod;
        extern PyObject* mainNamespace;
        extern bool    initialised;

    // public:
        bool init ();
        bool final ();
        // virtual ~goPython ();

        PyObject* getMainMod ();
        PyObject* getMainNamespace ();

        bool call (const goString& cmd);
        bool call (const char* cmd);
        PyObject* run (const goString& cmd);

        PyObject* getObject (const char* name);

        void getAllSwigTypes (goList<goString>& ret);

        /** 
         * @brief Add a new swig wrapped object to
         * the interpreter.
         * 
         * All set functions for swig wrapped types are simply using this.
         *
         * @param name     Name of the object in python.
         * @param o        Object to wrap.
         * @param own_it   If true, python will own the object.
         * @param type_str Identifier used for SWIG_TypeQuery()
         */
        template <class T>
        void setSwigPointer (const char* name, T* o, bool own_it, const char* type_str)
        {
            swig_type_info* info = SWIG_TypeQuery (type_str);
            if (!info)
            {
                goString s = "goPython::set: SWIG_TypeQuery() failed.";
                s += " requested type: "; s += type_str;
                goLog::error (s);
                return;
            }
            int flags = 0;
            if (own_it)
                flags = SWIG_POINTER_OWN;
            PyObject* obj = SWIG_NewPointerObj (o, info, flags);

            PyObject* n = PyString_FromString (name);
            PyDict_SetItem (goPython::mainNamespace, n, obj);
            Py_XDECREF(n);
            Py_XDECREF(obj);
        };

        /** 
         * @brief Get a swig wrapped object pointer from
         * the python interpreter.
         * 
         * All get functions for swig wrapped types are simply using this.
         *
         * @param name     Name of the object in python.
         * @param own_it   If true, C++ will own the object.
         * You will then need to deallocate it yourself.
         * @param type_str Identifier used for SWIG_TypeQuery()
         */
        template <class T>
        T* getSwigPointer (const char* name, bool own_it, const char* type_str)
        {
            PyObject* o = goPython::getObject (name);
            if (!o)
                return 0;

            swig_type_info *info = SWIG_TypeQuery (type_str);
            if (!info)
                return 0;

            T* ptr = 0;
            int own;
            int flags = 0;
            if (own_it)
                flags = SWIG_POINTER_OWN;
            int ok = SWIG_Python_ConvertPtrAndOwn (o, (void**)&ptr, info, flags, &own);
            if (ok < 0)
                return 0;
            
            return ptr;
        };

        goFloat   getFloat (const char* name);
        goDouble  getDouble (const char* name);
        void      set (const char* name, goFloat value);
        void      set (const char* name, goDouble value);

        //= Terribly sorry. But this makes it quicker to write down.
        //= Declares set and get methods for wrapped golib objects.
        /** 
         * @brief Macro to create a get/set function pair declaration.
         * 
         * Creates <br>
         * <code> set (const char* name, type_spec *o, bool own_it = false); </code> <br>
         * and <br>
         * <code> type_spec* get##spec (const char* name, bool own_it = false); </code> <br>
         *
         * @param type_spec C++ type of the object.
         * @param spec      Extension for the get function.
         */
#define GOPYTHON_GETSET_DECLARATION(type_spec,spec) \
    type_spec* get##spec (const char* name, bool own_it = false); \
        void set (const char* name, type_spec *o, bool own_it = false);
    
        GOPYTHON_GETSET_DECLARATION(goVectorf, Vectorf);
        GOPYTHON_GETSET_DECLARATION(goVectord, Vectord);
        GOPYTHON_GETSET_DECLARATION(goMatrixf, Matrixf);
        GOPYTHON_GETSET_DECLARATION(goMatrixd, Matrixd);
        GOPYTHON_GETSET_DECLARATION(goMatrix<goIndex_t>, Matrixi);
        GOPYTHON_GETSET_DECLARATION(goSignal3DBase<void>, Signal3DBase);
        GOPYTHON_GETSET_DECLARATION(goSignal3D<void>, Signal3D);
        GOPYTHON_GETSET_DECLARATION(goString, String);

    // private:
        // goPythonPrivate* myPrivate;
};

/** 
 * @brief Macro to add a definition of a get/set pair to goPython.
 *
 * adds <code>void goPython::set (const char* name, type_spec* o, bool own_it)</code><br>
 * and <code>type_spec* goPython::get##spec (const char* name, bool own_it)</code><br>
 *
 * @param type_spec    c++ Type name
 * @param py_type_spec python type identifier (used in getSwigPointer()).
 * @param spec         Name extension for the \c get function.
 * 
 */
#define GOPYTHON_GETSET_DEFINITION(type_spec,py_type_spec,spec) \
    type_spec* goPython::get##spec (const char* name, bool own_it) \
    { \
        const char* type_str = #py_type_spec " *"; \
        printf ("%s\n", type_str); \
        return getSwigPointer<type_spec> (name, own_it, type_str); \
    } \
    void goPython::set (const char* name, type_spec *o, bool own_it) \
    { \
        const char* type_str = #py_type_spec " *"; \
        setSwigPointer<type_spec> (name, o, own_it, type_str); \
    }

/** @} */

#endif
