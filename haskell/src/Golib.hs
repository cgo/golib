-- GENERATED by C->Haskell Compiler, version 0.16.2 Crystal Seed, 24 Jan 2009 (Haskell)
-- Edit the ORIGNAL .chs file instead!


{-# LINE 1 "test.chs" #-}{-# LANGUAGE ForeignFunctionInterface #-}
{-# LANGUAGE TypeSynonymInstances #-}

module Golib
(GoMatrix,
 matrixNew) where

import C2HS
import Foreign.C.Types
import Foreign.Ptr
import Foreign.Storable




{-# LINE 16 "test.chs" #-}

-- getNumber = {#call unsafe getNumber as _getNumber#}
-- {# fun unsafe test as test {} -> `Int' peekIntConv*  #}
test :: IO (Int)
test =
  test'_ >>= \res ->
  let {res' = cIntConv res} in
  return (res')
{-# LINE 20 "test.chs" #-}

newtype GoMatrix = GoMatrix (ForeignPtr (GoMatrix))
withGoMatrix (GoMatrix fptr) = withForeignPtr fptr
{-# LINE 22 "test.chs" #-}
matrixNew :: IO (ForeignPtr GoMatrix)
matrixNew =
  matrixNew'_ >>= goMatrixOutMarshal 
{-# LINE 23 "test.chs" #-}

goMatrixOutMarshal = newForeignPtr goMatrixFinalize

foreign import ccall "test.h &golib_matrix_destroy"
	goMatrixFinalize :: FunPtr (Ptr GoMatrix -> IO ())



-- {# fun unsafe golib_matrix_new as matrixNew {} -> `GoMatrix' id #}

{- main = do
     n <- test
     putStrLn $ "test () yields " ++ show n -}
foreign import ccall unsafe "test.chs.h test"
  test'_ :: (IO CInt)

foreign import ccall unsafe "test.chs.h golib_matrix_new"
  matrixNew'_ :: (IO (Ptr (GoMatrix)))
